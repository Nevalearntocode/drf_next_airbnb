# when the service's volumes are set to ./*:/usr/src/*/, docker will reflect the changes in local environment

services:
  redis:
    image: redis:7.4.0-alpine
    container_name: airbnb_redis
    profiles: [celery]

  django:
    build: ./backend
    container_name: airbnb_django
    volumes:
      - ./backend:/usr/src/django/
      # - django:/usr/src/django/
    # command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    env_file:
      - ./.env.dev
    depends_on:
      - database
      - uvicorn
      # - redis

  uvicorn:
    build: ./backend
    container_name: uvicorn
    volumes:
      - ./backend:/usr/src/django/
    command: uvicorn backend.asgi:application --host 0.0.0.0 --port 8002 --log-level debug --reload
    ports:
      - "8002:8002"
    env_file:
      - .env.dev
    depends_on:
      - redis

  database:
    image: postgres:16.3-alpine
    container_name: airbnb_database
    volumes:
      - postgres:/var/lib/postgresql/data/
    env_file:
      - .env.dev
    ports:
      - "1234:1234"
    command: -p 1234

  celery:
    build: ./backend
    container_name: celery
    profiles: [celery]
    command: ["celery", "-A", "backend", "worker", "--loglevel=info"]
    volumes:
      - ./backend:/usr/src/django/
      # - django:/usr/src/django/
    env_file:
      - .env.dev
    depends_on:
      - redis

  celery-beat:
    build: ./backend
    container_name: celery-beat
    profiles: [celery]
    command: ["celery", "-A", "backend", "beat", "--loglevel=info"]
    volumes:
      - ./backend:/usr/src/django/
      # - django:/usr/src/django/
    env_file:
      - .env.dev
    depends_on:
      - redis

  nextjs:
    build: ./frontend
    container_name: nextjs
    volumes:
      - ./frontend:/usr/src/nextjs/
      # - nextjs:/usr/src/nextjs/
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env
    profiles: [nextjs]

# but if you specify the volumes here, docker won't reflect the changes in local environment
# and the only way to reflect the changes is delete the volume itself
# when delete the volume, docker will copy the current working directory to set the volume, so it's like a one time snapshot
# i don't know if this is a good approach
# i'm thinking of making more profile for dev mode 
volumes:
  postgres:
  # nextjs:
  # django: